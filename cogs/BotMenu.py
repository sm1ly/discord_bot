import disnake
from disnake.ext import commands
from func.logger import logger
from func.database import get_user_data, is_user_moderated, is_user_vip
from bot import bot_administrators
from config import CHANNEL_ID_HOW_WE_WORK, CHANNEL_ID_MODERATE, CHANNEL_ID_PAID_SERVICE


def create_dropdown(options):
    class Dropdown(disnake.ui.StringSelect):
        def __init__(self):
            super().__init__(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é...",
                min_values=1,
                max_values=1,
                options=options,
            )

        async def callback(self, inter: disnake.MessageInteraction):
            await inter.response.send_message(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {self.values[0]}")

    return Dropdown()


def create_dropdown_view(dropdown):
    class DropdownView(disnake.ui.View):
        def __init__(self):
            super().__init__()
            self.add_item(dropdown)

    return DropdownView()


class BotMenu(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info(f"loaded cog: {self.qualified_name}")

    @commands.slash_command(name="menu", description="–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫ —É—Å–ª—É–≥.")
    async def menu(self, inter: disnake.ApplicationCommandInteraction):
        user_data = {inter.author.id: await get_user_data(inter.author.id)}
        if not user_data.get(inter.author.id):
            await inter.response.send_message(
                f'–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –ì–æ—Å—Ç–µ–º –∏–ª–∏ VIP-–ì–æ—Å—Ç–µ–º. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ <#{CHANNEL_ID_HOW_WE_WORK}>.',
                ephemeral=True)
            return

        guest_options = [
            disnake.SelectOption(label="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–æ—Å—Ç–µ–π –∏ –∏—Ö –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π"),
            disnake.SelectOption(label="–£—Å–ª—É–≥–∏ –∫–æ–Ω—Å—å–µ—Ä–∂–∞ 24/7"),
            disnake.SelectOption(label="–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"),
        ]

        vip_options = [
            disnake.SelectOption(label="pos1", description="This is pos1", emoji="ü•á"),
            disnake.SelectOption(label="pos2", description="This is pos2", emoji="ü•à"),
            disnake.SelectOption(label="pos3", description="This is pos3", emoji="ü•â"),
            disnake.SelectOption(label="pos4", description="This is pos4", emoji="üèÖ"),
            disnake.SelectOption(label="pos5", description="This is pos5", emoji="üéñÔ∏è"),
            disnake.SelectOption(label="pos6", description="This is pos6", emoji="üèÜ"),
            disnake.SelectOption(label="pos7", description="This is pos7", emoji="üéóÔ∏è"),
        ]

        if await is_user_vip(inter.author.id):
            vip_dropdown = create_dropdown(vip_options)
            vip_menu = create_dropdown_view(vip_dropdown)
            await inter.response.send_message(f'VIP Guest menu', view=vip_menu, ephemeral=True)
            return

        if await is_user_moderated(inter.author.id):
            guest_dropdown = create_dropdown(guest_options)
            guest_menu = create_dropdown_view(guest_dropdown)
            await inter.response.send_message(f'Guest menu', view=guest_menu, ephemeral=True)
        else:
            await inter.response.send_message(f'–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ <#{CHANNEL_ID_MODERATE}>.',
                                              ephemeral=True)

def setup(bot: commands.Bot):
    bot.add_cog(BotMenu(bot))

